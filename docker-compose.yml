services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks: [shopnetwork]

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    depends_on: [zookeeper]
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD-SHELL", "echo > /dev/tcp/localhost/9092"]
      interval: 5s
      retries: 10
    networks: [shopnetwork]

  orders-database:
    image: postgres:16
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_USER: user
      POSTGRES_DB: orders
    volumes:
      - ./db-init/orders-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d orders"]
      interval: 3s
      retries: 10
    networks: [shopnetwork]
    ports:
      - "5433:5432"

  payments-database:
    image: postgres:16
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_USER: user
      POSTGRES_DB: payments
    volumes:
      - ./db-init/payments-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d payments"]
      interval: 3s
      retries: 10
    networks: [shopnetwork]

  order-service:
    build:
      context: .
      dockerfile: order-service/Dockerfile
    environment:
      ConnectionStrings__OrdersDb: Host=orders-database;Database=orders;Username=user;Password=password
      Kafka__BootstrapServers: kafka:9092
      Kafka__OutboxTopic: orders.payments
    depends_on:
      kafka:           { condition: service_healthy }
      orders-database: { condition: service_healthy }
    ports: [ "8080:8080" ]
    networks: [shopnetwork]

  payment-service:
    build:
      context: .
      dockerfile: payment-service/Dockerfile
    environment:
      ConnectionStrings__PaymentsDb: Host=payments-database;Database=payments;Username=user;Password=password
      Kafka__BootstrapServers: kafka:9092
      Kafka__OutboxTopic: orders.status
      ASPNETCORE_ENVIRONMENT: Development
    depends_on:
      kafka:              { condition: service_healthy }
      payments-database:  { condition: service_healthy }
    ports: [ "8081:8080" ]
    networks: [shopnetwork]

  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    depends_on:
      order-service:    { condition: service_started }
      payment-service:  { condition: service_started }
    ports: [ "80:80" ]
    networks: [shopnetwork]

networks:
  shopnetwork: {}
